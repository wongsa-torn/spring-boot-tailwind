package dev.wongweb.tailwind.controller;

import dev.wongweb.tailwind.model.User;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import dev.wongweb.tailwind.service.UserService;
import org.springframework.ui.Model;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import jakarta.servlet.http.HttpServletRequest;
import org.springframework.security.web.csrf.CsrfToken;

@Controller
@RequestMapping("/management")
public class ManagementController {

    private final UserService userService;

    private static final Logger log = LoggerFactory.getLogger(ManagementController.class);

    public ManagementController(UserService userService) {
        this.userService = userService;
    }

    // @Autowired
    // private HttpServletRequest request;

    // @GetMapping
    // public String getManagementPage(Model model) {
    // // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å service
    // List<User> users = userService.getAllUsers();
    // model.addAttribute("users", users); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤
    // return "management/management"; // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô template ‡∏Ç‡∏≠‡∏á management
    // }

    @GetMapping // ‡∏´‡∏£‡∏∑‡∏≠ @GetMapping("")
    public String getManagementPage(Model model, HttpServletRequest request) {
        List<User> users = userService.getAllUsers();
        model.addAttribute("users", users);

        // ‚úÖ ‡∏î‡∏∂‡∏á CSRF token ‡∏à‡∏≤‡∏Å request
        CsrfToken csrfToken = (CsrfToken) request.getAttribute(CsrfToken.class.getName());
        if (csrfToken != null) {
            model.addAttribute("_csrf", csrfToken);
        }

        return "management/management";
    }

    //
    // 1 start-------------- Add New User
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Modal
    @GetMapping("/add")
    public String showAddForm(Model model) {
        model.addAttribute("user", new User());
        return "management/user-form :: userForm"; // <<< ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ fragment
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    @PostMapping("/save")
    public String saveUser(@ModelAttribute User user) {
        if (user.getRole() == null || user.getRole().isEmpty()) {
            user.setRole("USER"); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        }
        userService.saveUser(user);
        return "redirect:/management";
    }
    // 1 end-----------------

    // 2 start--------------- Edit User
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Modal
    @GetMapping("/edit/{username}")
    public String showEditForm(@PathVariable String username, Model model) {
        User existingUser = userService.getByUsername(username);
        model.addAttribute("user", existingUser);
        return "management/user-form :: userForm"; // üëà fragment ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    @PostMapping("/update")
    public String updateUser(@ModelAttribute User user) {
        userService.saveUser(user); // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        return "redirect:/management"; // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    }
    // 2 end--------------------

    // 3 start------------------ Delete User
    @DeleteMapping("/delete/{username}")
    public ResponseEntity<?> deleteUser(@PathVariable String username) {
        log.info("Deleting user with username: " + username);
        userService.deleteByUsername(username); // üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡πÉ‡∏ä‡πâ service
        return ResponseEntity.ok().build();
    }
    // 3 end-------------------------

}